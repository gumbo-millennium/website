name: Test and deploy

on:
  pull_request:
  push:
    branches:
    - master

jobs:
  laravel-frontend:
    name: "Front-end build and test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache node_modules
        id: cache-node
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-build-${{ env.cache-name }}-
            node-build-

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install Node dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm clean-install

      - name: Build Front-end
        run: npm run build

      - name: Publish front-end
        uses: actions/upload-artifact@master
        with:
          name: front-end
          path: public/

  laravel-backend:
    name: "Back-end build and test"
    runs-on: 'ubuntu-latest'

    needs:
      - laravel-frontend

    strategy:
      matrix:
        php:
          - '7.4'
        include:
          - php: '7.4'
            main: true

    services:
      database:
        image: mysql:5
        ports:
          - 13306:3306
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php }}
          extensions: exif, json, mbstring, bcmath, dom, fileinfo, mysql, gd, imagick
          coverage: pcov

      - name: Configure Imagick PDF policy
        run:
          sudo sed
            --in-place
            's/<policy domain="coder" rights="none" pattern="PDF" \/>/<policy domain="coder" rights="read" pattern="PDF" \/>/'
            /etc/ImageMagick*/policy.xml

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Check for Gumbo Millennium typos
        run: .github/find-typos.sh

      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: node-build-${{ hashFiles('**/package-lock.lock') }}
          restore-keys: |
            node-build-${{ env.cache-name }}-
            node-build-

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install composer dependencies
        uses: ramsey/composer-install@v1
        with:
          composer-options: "--ignore-platform-req=php"

      - name: Wait for MySQL to get ready
        timeout-minutes: 5
        run: |
          while ! mysqladmin --protocol=tcp --port=13306 ping 2>/dev/null; do
            echo "MySQL still offline, waiting 5 seconds";
            sleep 5s;
          done

      - name: Prepare database
        run: php artisan migrate --seed

      - name: Install an application key
        run: php artisan key:generate

      - name: Download front-end
        uses: actions/download-artifact@master
        with:
          name: front-end
          path: public/

      - name: Install Font Awesome icons
        run: npm run postinstall

      - name: Run linters
        run: composer run lint

      - name: Test optimizing the config
        run: |
          php artisan optimize -vv
          php artisan optimize:clear -vv

      - name: Run unit tests
        run: |
          vendor/bin/phpunit \
            --coverage-clover coverage-clover.xml

      - name: Report coverage to Pull Request
        uses: slavcodev/coverage-monitor-action@v1
        if: ${{ github.event_name == 'pull_request' && matrix.main == true }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clover_file: coverage-clover.xml
          threshold_alert: 15
          threshold_warning: 60
          comment: false

      - name: Report test results to CodeClimate
        if: matrix.php == '7.4'
        run: |
          curl -o ./cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t clover coverage-clover.xml
          ./cc-test-reporter upload-coverage
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODECLIMATE_ID }}
        continue-on-error: true

  deploy:
    name: "Deploy application"
    runs-on: ubuntu-latest
    needs:
      - laravel-frontend
      - laravel-backend
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: '7.4'
          extensions: exif,json,mbstring

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Determine data for environment
        id: deployment-data
        run: .github/bin/prep-env.sh "${{ github.repository }}" "${{ github.event_name }}" "${{ github.head_ref }}" "${{ github.ref }}"

      - name: Install Laravel Envoy
        run: |
          composer global require --no-progress laravel/envoy
          echo "$HOME/.composer/vendor/bin/" >> $GITHUB_PATH

      - name: Configure SSH connection
        run: |
          mkdir -p ${HOME}/.ssh
          echo "$SSH_PRIVATE_KEY" > ${HOME}/.ssh/id_deploy
          chmod 0600 ${HOME}/.ssh/id_deploy
          echo "Host *" > ${HOME}/.ssh/config
          echo "    StrictHostKeyChecking no" >> ${HOME}/.ssh/config
          echo "Host deploy.local" >> ${HOME}/.ssh/config
          echo "    HostName ${SSH_HOST}" >> ${HOME}/.ssh/config
          echo "    Port ${SSH_PORT}" >> ${HOME}/.ssh/config
          echo "    User ${SSH_USER}" >> ${HOME}/.ssh/config
          echo "    IdentityFile ${HOME}/.ssh/id_deploy" >> ${HOME}/.ssh/config
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}

      - name: Start Deployment
        uses: bobheadxi/deployments@v0.4.0
        id: deployment-start
        with:
          step: start
          env: ${{ steps.deployment-data.outputs.name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Envoy
        id: deployment-envoy
        run: |
          envoy run deploy \
            --branch="${{ steps.deployment-data.outputs.branch }}" \
            --remote="${{ steps.deployment-data.outputs.remote }}" \
            --hash="${{ steps.deployment-data.outputs.hash }}"

      - name: Finish Deployment (failure)
        uses: bobheadxi/deployments@v0.4.0
        if: failure()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env_url: "null"
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment-start.outputs.deployment_id }}

      - name: Finish Deployment (success)
        uses: bobheadxi/deployments@v0.4.0
        if: success()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env_url: ${{ steps.deployment-data.outputs.app_url }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment-start.outputs.deployment_id }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: success()
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ steps.deployment-data.outputs.name }}
