name: Test and deploy

on:
  pull_request:

  push:
    branches:
    - master
    - develop

jobs:
  laravel-frontend:
    name: "Front-end build and test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup NodeJS and cache
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install Node dependencies
        run: npm clean-install

      - name: Build Front-end
        run: npm run build

      - name: Publish front-end
        uses: actions/upload-artifact@master
        with:
          name: front-end
          path: public/

  laravel-backend:
    name: "Back-end build and test"
    runs-on: 'ubuntu-latest'

    needs:
      - laravel-frontend

    strategy:
      matrix:
        php:
          - '7.4'
          - '8.0'
        include:
          - php: '7.4'
            main: true

    services:
      database:
        image: mysql:8
        ports:
          - 13306:3306
        env:
          MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
          MYSQL_DATABASE: laravel
          MYSQL_USER: laravel
          MYSQL_PASSWORD: laravel

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: ${{ matrix.php }}
          extensions: exif, json, mbstring, bcmath, dom, fileinfo, mysql, gd, imagick
          coverage: pcov

      - name: Configure Imagick PDF policy
        run:
          sudo sed
            --in-place
            's/<policy domain="coder" rights="none" pattern="PDF" \/>/<policy domain="coder" rights="read" pattern="PDF" \/>/'
            /etc/ImageMagick*/policy.xml

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup NodeJS and cache
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'

      - name: Check for Gumbo Millennium typos
        run: .github/find-typos.sh

      - name: Copy environment config
        run: cp .github/actions.env .env

      - name: Install composer dependencies
        uses: ramsey/composer-install@v1
        with:
          composer-options: "--ignore-platform-req=php"

      - name: Install Node dependencies
        run: npm clean-install

      - name: Wait for MySQL to get ready
        timeout-minutes: 5
        run: |
          while ! mysqladmin --protocol=tcp --port=13306 ping 2>/dev/null; do
            echo "MySQL still offline, waiting 5 seconds";
            sleep 5s;
          done

      - name: Prepare database
        run: php artisan migrate --seed

      - name: Install an application key
        run: php artisan key:generate

      - name: Install Font Awesome icons
        run: npm run postinstall

      - name: Run linters
        run: composer run lint

      - name: Test optimizing the config
        run: |
          php artisan optimize -vv
          php artisan optimize:clear -vv

      - name: Run unit tests
        run: |
          vendor/bin/phpunit \
            --coverage-clover coverage-clover.xml

      - name: Report coverage to Pull Request
        uses: slavcodev/coverage-monitor-action@v1
        if: ${{ github.event_name == 'pull_request' && matrix.main == true }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clover_file: coverage-clover.xml
          threshold_alert: 15
          threshold_warning: 60
          comment: false

      - name: Report test results to CodeClimate
        if: ${{ matrix.main == true }}
        run: |
          curl -o ./cc-test-reporter -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t clover coverage-clover.xml
          ./cc-test-reporter upload-coverage
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CODECLIMATE_ID }}
        continue-on-error: true

  deploy:
    name: Deploy application
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs:
      - laravel-frontend
      - laravel-backend

    steps:
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: '7.4'
          tools: deployer

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Download front-end
        uses: actions/download-artifact@master
        with:
          name: front-end
          path: public/

      - name: Determine name of deployment
        id: env
        run: .github/bin/determine-target.sh

      - name: Configure SSH connection
        run: |
          test -d ~/.ssh || mkdir ~/.ssh

          echo "Installing deploy host key"
          ssh-keygen -R ${{ secrets.DEPLOY_HOST }} || true
          ssh-keyscan -H -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

          echo "Installing SSH host alias"
          echo "Host ${{ steps.env.outputs.name }}.env.gumbo-millennium.nl" >> ~/.ssh/config
          echo "    HostName ${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/config
          echo "    Port ${{ secrets.DEPLOY_PORT }}" >> ~/.ssh/config
          echo "    User ${{ secrets.DEPLOY_USER }}" >> ~/.ssh/config

          echo "Installing SSH key"
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 0700 ~/.ssh
          chmod 0600 ~/.ssh/id_ed25519 ~/.ssh/config

          echo "Fingerprint of installed key:"
          ssh-keygen -l -f ~/.ssh/id_ed25519

      - name: Start Deployment
        uses: bobheadxi/deployments@v0.4.0
        id: deployment-start
        with:
          step: start
          env: ${{ steps.env.outputs.name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run deployer
        id: deploy
        run: deployer deploy ${{ steps.env.outputs.name }} -vv

      - name: Finish Deployment
        uses: bobheadxi/deployments@v0.4.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env_url: "${{ steps.deploy.outputs.url }}/"
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment-start.outputs.deployment_id }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ steps.deployment-data.outputs.name }}
